29,55c29,35
< #==============================================================================
< #
< #  Program:   ParaView
< #  Module:    $RCSfile: servermanager.diff,v $
< #
< #  Copyright (c) Kitware, Inc.
< #  All rights reserved.
< #  See Copyright.txt or http://www.paraview.org/HTML/Copyright.html for details.
< #
< #     This software is distributed WITHOUT ANY WARRANTY without even
< #     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
< #     PURPOSE.  See the above copyright notice for more information.
< #
< #==============================================================================
< import paraview, re, os, new, sys, vtk
< 
< if not paraview.compatibility.minor:
<     paraview.compatibility.major = 3
< if not paraview.compatibility.major:
<     paraview.compatibility.minor = 5
< 
< if os.name == "posix":
<     from libvtkPVServerCommonPython import *
<     from libvtkPVServerManagerPython import *
< else:
<     from vtkPVServerCommonPython import *
<     from vtkPVServerManagerPython import *
---
> 
> 
> 
> import re, os, new, sys
> from paravis import *
> 
> 
63,64c43
<     if paraview.compatibility.GetVersion() >= 3.5 and \
<       smproperty.IsA("vtkSMStringVectorProperty"):
---
>     if smproperty.IsA("vtkSMStringVectorProperty"):
66,67c45
<         if  al and al.IsA("vtkSMArraySelectionDomain") and \
<             smproperty.GetRepeatable():
---
>         if  al and al.IsA("vtkSMArraySelectionDomain") and smproperty.GetRepeatable():
87,88c65
<         if smproperty.IsA("vtkSMIntVectorProperty") and \
<           smproperty.GetDomain("enum"):
---
>         if smproperty.IsA("vtkSMIntVectorProperty") and smproperty.GetDomain("enum"):
237,238c214,216
<             return self.SMProxy == other.SMProxy
<         return self.SMProxy == other
---
>             ## VSV using IsSame instead
>             return self.SMProxy.IsSame(other.SMProxy)
>         return self.SMProxy.IsSame(other)
333,336c311,314
<         if not c.HasObserver("ModifiedEvent"):
<             self.ObserverTag =c.AddObserver("ModifiedEvent", \
<                               _makeUpdateCameraMethod(weakref.ref(self)))
<             self.Observed = c
---
>         # VSV: Observers are not supported
> ##         if not c.HasObserver("ModifiedEvent"):
> ##             self.ObserverTag =c.AddObserver("ModifiedEvent", _makeUpdateCameraMethod(weakref.ref(self)))
> ##             self.Observed = c
439,457c417,434
<     if paraview.compatibility.GetVersion() >= 3.5:
<         def FileNameChanged(self):
<             "Called when the filename changes. Selects all variables."
<             SourceProxy.FileNameChanged(self)
<             self.SelectAllVariables()
< 
<         def SelectAllVariables(self):
<             "Select all available variables for reading."
<             for prop in ('PointVariables', 'EdgeVariables', 'FaceVariables',
<                 'ElementVariables', 'GlobalVariables'):
<                 f = getattr(self, prop)
<                 f.SelectAll()
< 
<         def DeselectAllVariables(self):
<             "Deselects all variables."
<             for prop in ('PointVariables', 'EdgeVariables', 'FaceVariables',
<                 'ElementVariables', 'GlobalVariables'):
<                 f = getattr(self, prop)
<                 f.DeselectAll()
---
>     def FileNameChanged(self):
>         "Called when the filename changes. Selects all variables."
>         SourceProxy.FileNameChanged(self)
>         self.SelectAllVariables()
> 
>     def SelectAllVariables(self):
>         "Select all available variables for reading."
>         for prop in ('PointVariables', 'EdgeVariables', 'FaceVariables',
>                      'ElementVariables', 'GlobalVariables'):
>             f = getattr(self, prop)
>             f.SelectAll()
> 
>     def DeselectAllVariables(self):
>         "Deselects all variables."
>         for prop in ('PointVariables', 'EdgeVariables', 'FaceVariables',
>                      'ElementVariables', 'GlobalVariables'):
>             f = getattr(self, prop)
>             f.DeselectAll()
1040c1017,1018
<             if proxy == px:
---
>             ## VSV: ==
>             if proxy.IsSame(px):
1217c1195
<         return vtk.vtkDataObjectTypes.GetClassNameFromTypeId(self.GetDataSetType())
---
>         return vtkDataObjectTypes.GetClassNameFromTypeId(self.GetDataSetType())
1259,1261d1236
<     if paraview.compatibility.GetVersion() <= 3.4:
<        def Range(self, component=0):
<            return self.GetRange(component)
1521c1496
<         collection = vtk.vtkCollection()
---
>         collection = vtkCollection()
1909c1884
< 
---
>        
2020c1995,1996
<         try: isRep = rep.Input == aProxy
---
>         #VSV: ==
>         try: isRep = rep.Input.IsSame(aProxy)
2265,2281c2241,2242
<     """Turn on/off printing of progress (by default, it is on). You can
<     always turn progress off and add your own observer to the process
<     module to handle progress in a custom way. See _printProgress for
<     an example event observer."""
<     global progressObserverTag
< 
<     # If value is true and progress printing is currently off...
<     if value and not GetProgressPrintingIsEnabled():
<         if fromGUI:
<             raise RuntimeError("Printing progress in the GUI is not supported.")
<         progressObserverTag = vtkProcessModule.GetProcessModule().AddObserver(\
<             "ProgressEvent", _printProgress)
< 
<     # If value is false and progress printing is currently on...
<     elif GetProgressPrintingIsEnabled():
<         vtkProcessModule.GetProcessModule().RemoveObserver(progressObserverTag)
<         progressObserverTag = None
---
>     """Is not supported because of not supported observers"""
>     pass
2308,2310c2269,2270
<     if paraview.compatibility.GetVersion() >= 3.5:
<         if smproxy.GetXMLLabel():
<             xmlName = smproxy.GetXMLLabel()
---
>     if smproxy.GetXMLLabel():
>         xmlName = smproxy.GetXMLLabel()
2350,2353c2310
<         if paraview.compatibility.GetVersion() >= 3.5:
<             return self.GetPropertyValue(propName)
<         else:
<             return self.GetProperty(propName)
---
>         return self.GetPropertyValue(propName)
2471c2428,2437
<     return paraview.make_name_valid(name)
---
>     """Make a string into a valid Python variable name.  Return None if
>     the name contains parentheses."""
>     if not name or '(' in name or ')' in name:
>         return None
>     import string
>     valid_chars = "_%s%s" % (string.ascii_letters, string.digits)
>     name = str().join([c for c in name if c in valid_chars])
>     if not name[0].isalpha():
>         name = 'a' + name
>     return name
2490,2491c2456
<         if paraview.compatibility.GetVersion() >= 3.5 and\
<            proto.GetXMLLabel():
---
>         if proto.GetXMLLabel():
2506,2509c2471,2472
<             if paraview.compatibility.GetVersion() >= 3.5:
<                 if (prop.GetInformationOnly() and propName != "TimestepValues" ) \
<                   or prop.GetIsInternal():
<                     continue
---
>             if (prop.GetInformationOnly() and propName != "TimestepValues" ) or prop.GetIsInternal():
>                 continue
2511,2512c2474
<             if paraview.compatibility.GetVersion() >= 3.5:
<                 names = [iter.PropertyLabel]
---
>             names = [iter.PropertyLabel]
2641,2650c2603,2606
<     if paraview.compatibility.GetVersion() <= 3.4:
<         ss = sources.SphereSource(Radius=2, ThetaResolution=32)
<         shr = filters.ShrinkFilter(Input=OutputPort(ss,0))
<         cs = sources.ConeSource()
<         app = filters.Append()
<     else:
<         ss = sources.Sphere(Radius=2, ThetaResolution=32)
<         shr = filters.Shrink(Input=OutputPort(ss,0))
<         cs = sources.Cone()
<         app = filters.AppendDatasets()
---
>     ss = sources.Sphere(Radius=2, ThetaResolution=32)
>     shr = filters.Shrink(Input=OutputPort(ss,0))
>     cs = sources.Cone()
>     app = filters.AppendDatasets()
2671,2674c2627
<     if paraview.compatibility.GetVersion() <= 3.4:
<         arraySelection = reader.PointResultArrayStatus
<     else:
<         arraySelection = reader.PointVariables
---
>     arraySelection = reader.PointVariables
2708,2711c2661
<             if paraview.compatibility.GetVersion() <= 3.4:
<                 print "Range:", ai.Range(j)
<             else:
<                 print "Range:", ai.GetRange(j)
---
>             print "Range:", ai.GetRange(j)
2742,2745c2692
<     if paraview.compatibility.GetVersion() <= 3.4:
<         source = sources.RTAnalyticSource()
<     else:
<         source = sources.Wavelet()
---
>     source = sources.Wavelet()
2776,2783c2723,2725
<     if paraview.compatibility.GetVersion() <= 3.4:
<         probe = filters.Probe(Input=source)
<         # with a line
<         line = sources.LineSource(Resolution=60)
<     else:
<         probe = filters.ResampleWithDataset(Input=source)
<         # with a line
<         line = sources.Line(Resolution=60)
---
>     probe = filters.ResampleWithDataset(Input=source)
>     # with a line
>     line = sources.Line(Resolution=60)
2827,2830c2769
<     if paraview.compatibility.GetVersion() <= 3.4:
<         sphere = sources.SphereSource()
<     else:
<         sphere = sources.Sphere()
---
>     sphere = sources.Sphere()
2897,2899c2836,2844
< if hasattr(sys, "ps1"):
<     # session is interactive.
<     print vtkSMProxyManager.GetParaViewSourceVersion();
---
> # Definitions for working in SALOME GUI mode
> aParams = myParavis.GetConnectionParameters()
> ActiveConnection = Connection(aParams[0])
> ActiveConnection.SetHost(aParams[1], aParams[2], aParams[3], aParams[4], aParams[5])
> ToggleProgressPrinting()
> fromGUI = True
> 
> print vtkSMProxyManager.GetParaViewSourceVersion();
> 
